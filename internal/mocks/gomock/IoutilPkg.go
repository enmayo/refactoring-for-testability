// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/phase-4/dependencies.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockIoutilPkg is a mock of IoutilPkg interface
type MockIoutilPkg struct {
	ctrl     *gomock.Controller
	recorder *MockIoutilPkgMockRecorder
}

// MockIoutilPkgMockRecorder is the mock recorder for MockIoutilPkg
type MockIoutilPkgMockRecorder struct {
	mock *MockIoutilPkg
}

// NewMockIoutilPkg creates a new mock instance
func NewMockIoutilPkg(ctrl *gomock.Controller) *MockIoutilPkg {
	mock := &MockIoutilPkg{ctrl: ctrl}
	mock.recorder = &MockIoutilPkgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIoutilPkg) EXPECT() *MockIoutilPkgMockRecorder {
	return m.recorder
}

// WriteFile mocks base method
func (m *MockIoutilPkg) WriteFile(filename string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockIoutilPkgMockRecorder) WriteFile(filename, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockIoutilPkg)(nil).WriteFile), filename, data, perm)
}

// ReadDir mocks base method
func (m *MockIoutilPkg) ReadDir(dirname string) ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dirname)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir
func (mr *MockIoutilPkgMockRecorder) ReadDir(dirname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockIoutilPkg)(nil).ReadDir), dirname)
}
